#lang racket
(define (make-reqtangle otr1 otr2 otr3 otr4)
  (cons (cons otr1 otr2) (cons otr3 otr4)))

(define (get-otr1 o) (car (car o)))
(define (get-otr2 o) (car (cdr o)))
(define (get-otr3 o) (cdr (car o)))
(define (get-otr4 o) (cdr (cdr o)))

(define (make-segment a b) (cons a b))

(define (start-segment a) (car a))

(define (end-segment a) (cdr a))

(define (make-point x y) (cons x y))

(define (x-point a) (car a))

(define (y-point a) (cdr a))

(define (midpoint otr)
  (make-point (average-point (x-point (start-segment otr))
                             (x-point (end-segment otr)))
              (average-point (y-point (start-segment otr))
                             (y-point (end-segment otr)))))

(define (average-point a b)
  (abs ( / (+ a b) 2.0)))

(define (print-point p)
  (newline)
  (display "(")
  (display (x-point p))
  (display ", ")
  (display (y-point p))
  (display ")"))

(define (print-segment s)
  (display "[")
  (display (print-point (start-segment s)))
  (display ", ")
  (display (print-point (end-segment s)))
  (display "]"))

(define (print-reqtangle req)
  (newline)
  (display "{")
  (display (print-segment (get-otr1 req)))
  (display ", ")
  (display (print-segment (get-otr2 req)))
  (display (print-segment (get-otr3 req)))
  (display ", ")
  (display (print-segment (get-otr4 req)))
  (display "}")
  )

(define (test) (print-point (midpoint otr1)))

(define (test2) (print-reqtangle reqtangle))

(define otr1 (make-segment (make-point 1 1) (make-point 1 6)))
(define otr2 (make-segment (make-point 1 6) (make-point 6 6)))
(define otr3 (make-segment (make-point 6 6) (make-point 6 1)))
(define otr4 (make-segment (make-point 6 1) (make-point 1 1)))

(define reqtangle (make-reqtangle otr1 otr2 otr3 otr4))