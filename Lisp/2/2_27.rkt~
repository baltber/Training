#lang racket
(define (deep-revers list)
  (define (deep-revers-iter list1 list2 count)
    (if (= count 0)
      list2
      (deep-revers-iter (cdr list1) (cons (car (map revers list1)) list2) (- count 1))))
  (deep-revers-iter list '() (length list)))

(define (revers a)
  (define (revers-iter list1 list2 count)
    (if (= count 0)
        list2
        (revers-iter (cdr list1) (cons (car list1) list2) (- count 1))))
  (revers-iter a '() (length a)))

(define x (list (list 1 2) (list 3 4)))

(define test (deep-revers x))