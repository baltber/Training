#lang racket
(define (make-rat n d)
  (let ((g ((if (negative? d) - +) (gcd n d))))
    (cons (/ n g) (/ d g))))
(define (gcd a b)
  (if (= b 0)
      a
      (gcd b (remainder a b))))

(define (numer x) (car x))

(define (denom x) (cdr x))

(define (print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))

(define one-third (make-rat 1 3))
(define one-third1 (make-rat 1 -3))

(define three (make-rat 20 4))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y)(denom x)))
            (* (denom x) (denom y))))

(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))

(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))


(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom y) (numer x))))

(define (equal-rat? x y)
  (=  (* (numer x) (denom y))
      (* (numer y) (denom x))))
